import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.aplicaciones.recursos.persistenciaMensajesGrupo.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.comunicacion.*;
import icaro.aplicaciones.agentes.AgenteAplicacionGestionQuedadas.objetivos.*;
import icaro.aplicaciones.agentes.AgenteAplicacionGestionQuedadas.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionGestionQuedadas.tools.*;
import icaro.aplicaciones.informacion.gestionQuedadas.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


rule "Recibir desde agente identificador el grupo identificado e informarle"
 when
 	notif:NotificacionIdentificado(chat:identNotificador, gr:grupo, que:quedada, tipoNotificacion == "INFO")
 then
 	Objetivo ob = new ObtenerNuevosMensajesGrupo();
 	ob.setobjectReferenceId(chat);
 	FocoGrupo fc = new FocoGrupo(chat);
 	
 	ItfPersistenciaMensajesGrupo persistencia = (ItfPersistenciaMensajesGrupo) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaMensajesGrupo);
	MensajeGrupo mgr = persistencia.obtenerMensajeGrupo(gr.getId());
	if (mgr != null) {
		//Enviar mensaje privado al chat indicando el mensaje
		persistencia.eliminarMensajeGrupo(gr.getId());		
	}
	else {
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(DescribirQuedada.class);
    	tarea.ejecutar(chat, que, gr);
    	TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  		tarea2.ejecutar(chat, ConversacionGrupo.msg("cancelarQuedada"));
    	//activar objetivo respuesta a cancelar
	}
 	
 	insert(fc);
 	insert(gr);
    insert(ob);
    insert(que);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Recibir desde agente identificador el grupo identificado"
 when
 	notif:NotificacionIdentificado(chat:identNotificador, gr:grupo, que:quedada, tipoNotificacion == "NOINFO")
 then
 	Objetivo ob = new ObtenerNuevosMensajesGrupo();
 	ob.setobjectReferenceId(chat);
 	FocoGrupo fc = new FocoGrupo(chat);
 	insert(fc);
 	insert(gr);
    insert(ob);
    insert(que);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Obtener nuevos mensajes desde persistencia"
 when //Sólo se debe ejecutar cuando el agente no está esperando una respuesta.
 	ob:ObtenerNuevosMensajesGrupo(chat:objectReferenceId, state == Objetivo.PENDING)
 	gr:Grupo(grupo == chat)
 then
 	ItfPersistenciaMensajesGrupo persistencia = (ItfPersistenciaMensajesGrupo) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaMensajesGrupo);
	MensajeGrupo mgr = persistencia.obtenerMensajeGrupo(gr.getId());
	if (mgr != null) {
		insert(mgr);
		persistencia.eliminarMensajeGrupo(gr.getId());		
	}
end
