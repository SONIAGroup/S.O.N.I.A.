import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.aplicaciones.recursos.persistenciaMensajesGrupo.*;
import icaro.aplicaciones.recursos.persistenciaQuedadas.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.comunicacion.*;
import icaro.aplicaciones.agentes.AgenteAplicacionGestionQuedadas.objetivos.*;
import icaro.aplicaciones.agentes.AgenteAplicacionGestionQuedadas.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionGestionQuedadas.tools.*;
import icaro.aplicaciones.informacion.gestionQuedadas.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


rule "Recibir desde agente identificador el grupo identificado e informarle"
 when
 	notif:NotificacionIdentificado(chat:identNotificador, gr:grupo, que:quedada, tipoNotificacion == "INFO")
 then
 	Objetivo ob = new ObtenerNuevosMensajesGrupo();
 	ob.setobjectReferenceId(chat);
 	FocoGrupo fc = new FocoGrupo(chat);
 	
 	ItfPersistenciaMensajesGrupo persistencia = (ItfPersistenciaMensajesGrupo) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaMensajesGrupo);
	MensajeGrupo mgr = persistencia.obtenerMensajeGrupo(gr.getId());
	if (mgr != null) {
		insert(mgr);
		persistencia.eliminarMensajeGrupo(gr.getId());		
	}
	else {
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(DescribirQuedada.class);
    	tarea.ejecutar(chat, que, gr);
    	TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  		tarea2.ejecutar(chat, ConversacionGrupo.msg("cancelarQuedada"));
    	Objetivo ob2 = new ObtenerRespuestaCancelarQuedada();
    	ob2.setobjectReferenceId(chat);
    	fc.setFoco(ob2);
    	insert(ob2);
	}
 	
 	insert(fc);
 	insert(gr);
    insert(ob);
    insert(que);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Recibir desde agente identificador el grupo identificado"
 when
 	notif:NotificacionIdentificado(chat:identNotificador, gr:grupo, que:quedada, tipoNotificacion == "NOINFO")
 then
 	Objetivo ob = new ObtenerNuevosMensajesGrupo();
 	ob.setobjectReferenceId(chat);
 	FocoGrupo fc = new FocoGrupo(chat);
 	insert(fc);
 	insert(gr);
    insert(ob);
    insert(que);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Obtener respuesta negativa a cancelar quedada"
 when
 	ob:ObtenerRespuestaCancelarQuedada(chat:objectReferenceId, state == Objetivo.PENDING)
	fc:FocoGrupo(grupo == chat, foco == ob)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.no, msgg:mensajeNotificacion )
 then
 	fc.setFoco(null);
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(chat, ConversacionGrupo.msg("decirOk"));
 	update(fc);
 	retract(ob);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Obtener respuesta afirmativa a cancelar quedada"
 when
 	ob:ObtenerRespuestaCancelarQuedada(chat:objectReferenceId, state == Objetivo.PENDING)
	fc:FocoGrupo(grupo == chat, foco == ob)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.si, msgg:mensajeNotificacion )
	gr:Grupo(grupo == chat)
	que:Quedada(idChat == chat)
 then
 	fc.setFoco(null);
 	ItfPersistenciaQuedadas persQuedada = (ItfPersistenciaQuedadas) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaQuedadas);
	ItfPersistenciaMensajesGrupo persMensajeGrupo = (ItfPersistenciaMensajesGrupo) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaMensajesGrupo);
 	
 	if ( que.getGrupoEmisor().getId().equals(gr.getId()) )
 		persMensajeGrupo.insertarMensajeGrupo(new MensajeGrupo(gr.getId(), que.getGrupoQueAcepta().getId(), MensajeGrupo.CANCELAR));
 	else
 		persMensajeGrupo.insertarMensajeGrupo(new MensajeGrupo(gr.getId(), que.getGrupoEmisor().getId(), MensajeGrupo.CANCELAR));
 	
 	persQuedada.eliminarQuedada(que);
 	update(fc);
 	retract(que);
 	retract(ob);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Obtener respuesta negativa a solicitar quedada"
 when
 	ob:ObtenerRespuestaSolicitarQuedada(chat:objectReferenceId, state == Objetivo.PENDING)
	fc:FocoGrupo(grupo == chat, foco == ob)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.no, msgg:mensajeNotificacion )
	que:Quedada(idChat == chat)
 then
 	fc.setFoco(null);
 	ItfPersistenciaQuedadas persQuedada = (ItfPersistenciaQuedadas) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaQuedadas);
 	ItfPersistenciaMensajesGrupo persMensajeGrupo = (ItfPersistenciaMensajesGrupo) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaMensajesGrupo);
 	
 	persMensajeGrupo.insertarMensajeGrupo(new MensajeGrupo(que.getGrupoEmisor().getId(), que.getGrupoQueAcepta().getId(), MensajeGrupo.DENEGAR));
 	que.setGrupoQueAcepta(null);
 	persQuedada.insertarQuedada(que);
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(chat, ConversacionGrupo.msg("respuestaDenegar"));
 	update(que);
 	update(fc);
 	retract(ob);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Obtener respuesta afirmativa a solicitar quedada"
 when
 	ob:ObtenerRespuestaSolicitarQuedada(chat:objectReferenceId, state == Objetivo.PENDING)
	fc:FocoGrupo(grupo == chat, foco == ob)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.si, msgg:mensajeNotificacion )
	que:Quedada(idChat == chat)
 then
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," LA QUEDADA TIENE GRUPO EMISOR " + que.getGrupoEmisor().getId() + " Y GRUPO QUE ACEPTA " + que.getGrupoQueAcepta().getId());
 	fc.setFoco(null);
 	ItfPersistenciaQuedadas persQuedada = (ItfPersistenciaQuedadas) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaQuedadas);
 	ItfPersistenciaMensajesGrupo persMensajeGrupo = (ItfPersistenciaMensajesGrupo) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaMensajesGrupo);
 	
 	persMensajeGrupo.insertarMensajeGrupo(new MensajeGrupo(que.getGrupoEmisor().getId(), que.getGrupoQueAcepta().getId(), MensajeGrupo.CONFIRMAR));
 	que.setConfirmada(true);
 	persQuedada.insertarQuedada(que);
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(chat, ConversacionGrupo.msg("respuestaConfirmar"));
 	update(que);
 	retract(ob);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Informar al grupo acerca del MensajeGrupo recibido para él"
 when
 	fc:FocoGrupo(chat:grupo, foco == null)
 	gr:Grupo(grupo == chat)
 	msggr:MensajeGrupo(idGrupoDestinatario == gr.getId(), msg:mensaje )
 	que:Quedada(idChat == chat)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	String texto;
  	
 	if (msg == MensajeGrupo.SOLICITAR) {
 		ItfPersistenciaQuedadas persQuedada = (ItfPersistenciaQuedadas) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaQuedadas);
 		Quedada que_act = persQuedada.obtenerQuedadaDeGrupoQueAcepta(msggr.getIdGrupoEmisor());
 		que.setGrupoQueAcepta(que_act.getGrupoQueAcepta());
 		Objetivo ob = new ObtenerRespuestaSolicitarQuedada();
 		ob.setobjectReferenceId(chat);
 		fc.setFoco(ob);
 		insert(ob);
 		update(fc);
 		update(que);
 		texto = ConversacionGrupo.msg("infoSolicitar");
 		tarea.ejecutar(chat, texto.replaceFirst("-param-", msggr.getIdGrupoEmisor()));
 	}
 	else if (msg == MensajeGrupo.CONFIRMAR) {
 		texto = ConversacionGrupo.msg("infoConfirmar");
 		tarea.ejecutar(chat, texto.replaceFirst("-param-", msggr.getIdGrupoEmisor()));
 	}
 	else if (msg == MensajeGrupo.DENEGAR) {
 		texto = ConversacionGrupo.msg("infoDenegar");
 		tarea.ejecutar(chat, texto.replaceFirst("-param-", msggr.getIdGrupoEmisor()));
 		retract(que);
 	}
 	else if (msg == MensajeGrupo.CANCELAR) {
 		texto = ConversacionGrupo.msg("infoCancelar");
 		tarea.ejecutar(chat, texto.replaceFirst("-param-", msggr.getIdGrupoEmisor()));
 		retract(que);
 	}
 	retract(msggr);	
end

rule "Obtener nuevos mensajes desde persistencia"
 salience -1
 timer ( int: 0 1s )
 when //Sólo se ejecutara cuando el agente no está esperando una respuesta.
 	ob:ObtenerNuevosMensajesGrupo(chat:objectReferenceId, state == Objetivo.PENDING)
 	fc:FocoGrupo(grupo == chat, foco == null)
 	gr:Grupo(grupo == chat)
 then
 	ItfPersistenciaMensajesGrupo persistencia = (ItfPersistenciaMensajesGrupo) NombresPredefinidos.REPOSITORIO_INTERFACES_OBJ.obtenerInterfazUso(VocabularioGestionQuedadas.IdentRecursoPersistenciaMensajesGrupo);
	MensajeGrupo mgr = persistencia.obtenerMensajeGrupo(gr.getId());
	if (mgr != null) {
		insert(mgr);
		persistencia.eliminarMensajeGrupo(gr.getId());		
	}
end
